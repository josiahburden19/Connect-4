function init(self)
	msg.post('/win_screen', 'disable')
	self.size = vmath.vector3()
	self.size.x, self.size.y = window.get_size()
	self.tile_size = 100
	self.rows, self.columns = 6, 9
	self.list_coords_x = {}
	self.factory_instances = {}
	self.first_coord = vmath.vector3()
	self.board = {}
	self.turn = true
	self.game_run = true
	self.processing_turn = false
	-- Blue == true
	-- White == false
	-- Set appropiate sprite for token
	if self.turn then
		sprite.play_flipbook('/token', 'token_1')
	else
		sprite.play_flipbook('/token', 'token_2')
	end
	self.started_snapping = false
	local coord = vmath.vector3()
	for i=0, self.columns-1, 1 do
		self.factory_instances[i + 1] = {}
		for j=0, self.rows-1, 1 do
			coord.x = (i*self.tile_size) + (self.size.x/2) - (self.columns * self.tile_size/2) + (self.tile_size/2)
			coord.y = (j*self.tile_size) + (self.size.y/2) - (self.rows * self.tile_size/2) + (self.tile_size/2) - 50
			self.factory_instances[i + 1][j + 1] = factory.create('#factory', vmath.vector3(coord.x, coord.y, 0))
			if (i == 0 and j == self.rows-1) then
				self.first_coord.x = coord.x
				self.first_coord.y = coord.y
			end
		end
		table.insert(self.list_coords_x, coord.x)
	end
	self.place_coord = vmath.vector3(0, self.first_coord.y + self.tile_size, 1)
	for i = 0, self.columns + 1, 1 do
		self.board[i] = {}
	end
	msg.post('.', 'acquire_input_focus')
end

function on_message(self, message_id, message, sender)
	if message_id == hash('mode') then
		self.mode = message[1]
	end
end

function on_input(self, action_id, action)
	if ((self.mode == 2) or (self.mode == 1 and self.turn and self.game_run)) then
		-- 2 Player mode
		local mouse_pos = vmath.vector3(action.x, action.y, 0)
		local function snap_coords(self, pos)
			local offset = (self.first_coord.x % self.tile_size)
			local new_pos = offset + math.floor((pos + self.tile_size/2 - offset)/self.tile_size) * self.tile_size
			return new_pos
		end
		self.place_coord.x = snap_coords(self, mouse_pos.x)
		if self.started_snapping == false then
			go.set_position(self.place_coord, '/token')
			self.started_snapping = true
		else
			go.animate('/token', 'position', go.PLAYBACK_ONCE_FORWARD, self.place_coord, go.EASING_OUTEXPO, 0.4)
		end
		if action_id == hash('touch') and action.pressed and indexOf(self.list_coords_x, self.place_coord.x) ~= nil and not self.processing_turn then
			self.processing_turn = true
			place(self)
			checkBoard(self, self.board, true)
			self.processing_turn = false
		end
	elseif (self.mode == 1 and not self.turn and self.game_run) and not self.processing_turn then
		self.processing_turn = true
		if AiCheck(self, self.board, 1) == false then
			math.randomseed(os.time())
			local index = math.random(-1, 1)
			self.place_coord.x = self.place_coord.x + index * self.tile_size
			if self.place_coord.x < self.list_coords_x[1] then
				self.place_coord.x = self.list_coords_x[1]
			elseif self.place_coord.x > self.list_coords_x[tableLength(self.list_coords_x)] then
				self.place_coord.x = self.list_coords_x[tableLength(self.list_coords_x)]
			end
			-- self.place_coord.x = self.first_coord.x
		else
			self.place_coord.x = AiCheck(self, self.board, 1)
		end
		go.animate('/token', 'position', go.PLAYBACK_ONCE_FORWARD, self.place_coord, go.EASING_OUTEXPO, 0.4, 0.1,
		function()
			place(self)
			checkBoard(self, self.board, true)
			self.processing_turn = false
		end)
	end
end
function AiCheck(self, board, times)
	local function fakePlace(self, board, pos_x, token)
		local coord = vmath.vector3()
		local index = indexOf(self.list_coords_x, pos_x)
		-- Drops a pretend token to simulate what would happen if the oppent made that move
		-- It then uses this info to decide if it can block a 4 in a row
		if tableLength(board[index]) < self.rows then
			table.insert(board[index], token)
			if checkBoard(self, board, false) then
				table.remove(board[index], tableLength(board[index]))
				return true
			else
				table.remove(board[index], tableLength(board[index]))
				return false
			end
		end
		return false
	end
	for j, k in ipairs({false, true}) do
		for i, v in ipairs(self.list_coords_x) do
			if fakePlace(self, board, v, k) then
				return v
			end
		end
	end
	return false
end

function indexOf(array, value)
	for i, v in ipairs(array) do
		if v == value then
			return i
		end
	end
	return nil
end

function tableLength(table)
	local count = 0
	for _ in pairs(table) do count = count + 1 end
	return count
end

function place(self, mode)
	local coord = vmath.vector3()
	local index = indexOf(self.list_coords_x, self.place_coord.x)
	if tableLength(self.board[index]) < self.rows then
		table.insert(self.board[index], self.turn)
		coord.y = self.first_coord.y - (self.rows - tableLength(self.board[index])) * self.tile_size
		coord.x = self.place_coord.x
		if self.turn then
			local spawned = factory.create('/token_1_factory#factory', vmath.vector3(coord.x, self.place_coord.y, 1))
			go.animate(spawned, 'position.y', go.PLAYBACK_ONCE_FORWARD, coord.y, go.EASING_OUTBOUNCE, 1)
		elseif not self.turn then
			local spawned = factory.create('/token_2_factory#factory', vmath.vector3(coord.x, self.place_coord.y, 1))
			go.animate(spawned, 'position.y', go.PLAYBACK_ONCE_FORWARD, coord.y, go.EASING_OUTBOUNCE, 1)
		end
		if self.turn then
			sprite.play_flipbook('/token', 'token_2')
		else
			sprite.play_flipbook('/token', 'token_1')
		end
		self.turn = not self.turn
	end
end

function checkBoard(self, board, mode, token)
	local function checkAround(self, coord, token)
		local function checkDirection(self, coord, token, direction, times)
			for i=1, times - 2, 1 do
				if not (board[coord.x + i * (direction.x)][coord.y + i * (direction.y)] == token) then
					return {false}
				end
			end
			return {true, direction}
		end

		local is_true = {}
		for i=-1, 1, 1 do
			for j=-1, 1, 1 do
				if board[coord.x + i][coord.y + j] == token and not (j == 0 and i == 0) then
					local new_coord = vmath.vector3(coord.x + i, coord.y + j, 0)
					local checked_direction = checkDirection(self, new_coord, token, vmath.vector3(i, j, 0), 4)
					if checked_direction[1] then
						table.insert(is_true, checked_direction[2])
					end
				end
			end
		end
		return is_true
	end
	
	for i=1, self.columns, 1 do
		for j=1, self.rows, 1 do
			if board[i][j] ~= nil then
				local checked_board = checkAround(self, vmath.vector3(i, j, 0), board[i][j])
				for k in pairs(checked_board) do
					if mode then
						for l=0, 3, 1 do
							local instance = tostring(self.factory_instances[i + l * (checked_board[k].x)][j + l * (checked_board[k].y)])
							instance = string.sub(instance, 8, -2) .. '#sprite'
							go.animate(instance, 'tint', go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0.5, 1, 0.4, 1), go.EASING_LINEAR, 1)
						end
						if k == 1 then
							self.game_end = false
							msg.post('.', 'release_input_focus')
							msg.post('/win_screen', 'enable')
							msg.post('/win_screen', 'game_end')
							if not self.turn then
								msg.post('/win_screen', 'text', {'White Wins'})
							elseif self.turn then
								msg.post('/win_screen', 'text', {'Blue Wins'})
							end
						end
					elseif not mode then
						return true
					end
				end
			end
		end
	end
	if not mode then
		return false
	end
end
	